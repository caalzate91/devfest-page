---
// biome-ignore assist/source/organizeImports: <explanation>
import { getCollection, type CollectionEntry } from "astro:content";
import AgendaItem from "./AgendaItem.astro";
import SpeakerCard from "../Common/SpeakerCard.astro";
import dayjs from "dayjs";

type Talk = CollectionEntry<"talks">["data"][0];

interface Props {
  talk: Talk;
}

const { talk } = Astro.props;

const talkId = talk.title.replaceAll(" ", "-");
const speakers = await getCollection("speakers");
const speaker = talk?.speaker
  ? speakers.find((s) => s.id === talk.speaker)
  : null;
---

<!-- <AgendaItem talk={talk}> --><!-- <div class="flex-1 cursor-pointer" id={talk.id}>
		<h4 class="font-bold text-xl m-0 group-hover:underline">
			{talk.data.title}
		</h4>
		{speaker ? <SpeakerCard speaker={speaker} /> : null}
	</div> --><!-- COMPONTENTE NUEVO --><!-- <div class="flex flex-col lg:flex-row bg-white shadow-md rounded-md p-6 space-y-4 lg:space-y-0 lg:space-x-6 my-3">
	<div class="flex flex-col w-full">
		<p class="text-[#F09828] font-semibold">
			{dayjs(talk.data.startDate).format('hh:mm A')} - {dayjs(talk.data.endDate).format('hh:mm A')}
		</p>
		<h4 class="text-2xl font-bold text-gray-900 my-3">{talk.data.title}</h4>
		<div class="flex flex-row w-full h-16">
			<div class="flex items-center w-1/5">
				<img
					src=`/public/assets/images/speakers/${speaker?.data.image}`
					alt="Speaker Image"
					class="w-16 h-16 rounded-full object-cover"
				/>
			</div>

			<div class="ml-4 w-full flex-grow content-center">
				<p class="text-gray-900 font-semibold">{speaker?.data.name}</p>
				<p class="text-blue-600">{speaker?.data.position}</p>
			</div>

			<div class="flex justify-end w-1/4 h-full">
				<img src="/public/assets/flags/co.svg" class="h-full object-contain" />
			</div>
		</div>
	</div>
</div> --><!-- </AgendaItem> -->
<AgendaItem talk={talk}>
  <div class="flex-1 cursor-pointer" id={talkId}>
    <h4 class="font-semibold text-lg m-0 group-hover:underline">
      {talk.title}
    </h4>
    {speaker ? <SpeakerCard speaker={speaker} /> : <span>{talk?.speaker}</span>}
  </div>
</AgendaItem>

<style lang="css" scoped>
  dialog {
    position: fixed;
    top: 0;
    left: 0;
    overflow: auto;
  }
  dialog::backdrop {
    background-color: rgba(0, 0, 0, 0.4);
    backdrop-filter: blur(5px);
  }
</style>

<dialog
  id={`${talkId}-dialog`}
  class="z-50 bg-white rounded-sm max-w-2xl animate__animated animate__zoomIn animate__faster"
>
  <main class="p-4">
    <div class="flex-col">
      <h4 class="font-bold text-xl m-0 mb-2">
        {talk.title}
      </h4>
      <div class="flex flex-row justify-between items-center mb-4">
        <div class="flex flex-row items-end gap-4">
          <span class="text-sm font-mono"
            >{dayjs(talk.startDate).format("hh:mm A")}</span
          >
          <span class="text-sm font-mono"
            >Track <span class="capitalize">{talk.track}</span></span
          >
        </div>
      </div>
      <p class="text-md leading-relaxed text-df-gray-700">
        {talk.description}
      </p>
    </div>
    <hr class="my-4" />
    {speaker ? <SpeakerCard speaker={speaker} /> : null}
  </main>
</dialog>

<script define:vars={{ talk }}>
  const element = document.querySelector(`#${talk.id}`);
  const dialog = document.querySelector(`#${talk.id}-dialog`);
  element.addEventListener("click", () => {
    if (dialog.open) {
      dialog.close();
      return;
    }
    dialog.showModal();
  });

  dialog.addEventListener("click", (event) => {
    if (event.target === dialog) {
      dialog.close();
    }
  });
</script>
