<!-- ---
// biome-ignore assist/source/organizeImports: <explanation>
import { getCollection, type CollectionEntry } from "astro:content";
import AgendaItem from "./AgendaItem.astro";
import SpeakerCard from "../Common/SpeakerCard.astro";
import dayjs from "dayjs";

interface Props {
  talk: CollectionEntry<"talks">;
}
const { talk } = Astro.props;
---

<AgendaItem talk={talk}>
  <div class="flex-1 cursor-pointer" id={talk.id}>
    <h4 class="font-bold text-xl m-0 group-hover:underline">
      {talk.data.title}
    </h4>
    {speaker ? <SpeakerCard speaker={speaker} /> : null}
  </div>
</AgendaItem>

<style lang="css" scoped>
  dialog {
    position: fixed;
    top: 0;
    left: 0;
    overflow: auto;
  }
  dialog::backdrop {
    background-color: rgba(0, 0, 0, 0.4);
    backdrop-filter: blur(5px);
  }
</style>

<dialog
  id={`${talk.id}-dialog`}
  class="z-50 bg-white rounded-sm max-w-2xl animate__animated animate__zoomIn animate__faster"
>
  <main class="p-4">
    <div class="flex-col">
      <h4 class="font-bold text-xl m-0 mb-2">
        {talk.data.title}
      </h4>
      <div class="flex flex-row justify-between items-center mb-4">
        <div class="flex flex-row items-end gap-4">
          <span class="text-sm font-mono"
            >{dayjs(talk.data.startDate).format("hh:mm A")} a {
              dayjs(talk.data.endDate).format("hh:mm A")
            }</span
          >
          <span class="text-sm font-mono"
            >Track <span class="capitalize">{talk.data.track}</span></span
          >
        </div>
      </div>
      <p class="text-md leading-relaxed text-df-gray-700">
        {talk.data.description}
      </p>
    </div>
    <hr class="my-4" />
    {speaker ? <SpeakerCard speaker={speaker} /> : null}
  </main>
</dialog>

<script define:vars={{ talk }}>
  const element = document.querySelector(`#${talk.id}`);
  const dialog = document.querySelector(`#${talk.id}-dialog`);
  element.addEventListener("click", () => {
    if (dialog.open) {
      dialog.close();
      return;
    }
    dialog.showModal();
  });

  dialog.addEventListener("click", (event) => {
    if (event.target === dialog) {
      dialog.close();
    }
  });
</script> -->
